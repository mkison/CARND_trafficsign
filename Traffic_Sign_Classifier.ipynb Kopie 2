{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Self-Driving Car Engineer Nanodegree\n",
    "\n",
    "## Deep Learning\n",
    "\n",
    "## Project: Build a Traffic Sign Recognition Classifier\n",
    "\n",
    "In this notebook, a template is provided for you to implement your functionality in stages which is required to successfully complete this project. If additional code is required that cannot be included in the notebook, be sure that the Python code is successfully imported and included in your submission, if necessary. Sections that begin with **'Implementation'** in the header indicate where you should begin your implementation for your project. Note that some sections of implementation are optional, and will be marked with **'Optional'** in the header.\n",
    "\n",
    "In addition to implementing code, there will be questions that you must answer which relate to the project and your implementation. Each section where you will answer a question is preceded by a **'Question'** header. Carefully read each question and provide thorough answers in the following text boxes that begin with **'Answer:'**. Your project submission will be evaluated based on your answers to each of the questions and the implementation you provide.\n",
    "\n",
    ">**Note:** Code and Markdown cells can be executed using the **Shift + Enter** keyboard shortcut. In addition, Markdown cells can be edited by typically double-clicking the cell to enter edit mode."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "## Step 0: Load The Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[[[ 75  78  80]\n",
      "   [ 74  76  78]\n",
      "   [ 83  84  83]\n",
      "   ..., \n",
      "   [ 67  74  73]\n",
      "   [ 65  69  68]\n",
      "   [ 66  67  66]]\n",
      "\n",
      "  [[ 82  83  85]\n",
      "   [ 80  80  82]\n",
      "   [ 87  86  83]\n",
      "   ..., \n",
      "   [ 73  77  77]\n",
      "   [ 75  77  75]\n",
      "   [ 79  79  77]]\n",
      "\n",
      "  [[ 79  79  81]\n",
      "   [ 84  83  85]\n",
      "   [ 91  88  89]\n",
      "   ..., \n",
      "   [ 72  74  72]\n",
      "   [ 74  75  71]\n",
      "   [ 78  78  74]]\n",
      "\n",
      "  ..., \n",
      "  [[126 128 133]\n",
      "   [118 123 128]\n",
      "   [108 117 120]\n",
      "   ..., \n",
      "   [ 96  96  90]\n",
      "   [ 99 101  94]\n",
      "   [ 99 103  99]]\n",
      "\n",
      "  [[ 90  94  98]\n",
      "   [ 91  97 103]\n",
      "   [ 77  87  92]\n",
      "   ..., \n",
      "   [104 104  97]\n",
      "   [107 111 102]\n",
      "   [ 95 103  97]]\n",
      "\n",
      "  [[ 85  84  87]\n",
      "   [ 93  99 104]\n",
      "   [ 69  80  85]\n",
      "   ..., \n",
      "   [101 102  94]\n",
      "   [ 98 101  90]\n",
      "   [ 90  97  89]]]\n",
      "\n",
      "\n",
      " [[[ 69  73  73]\n",
      "   [ 75  78  78]\n",
      "   [ 75  77  77]\n",
      "   ..., \n",
      "   [ 75  80  79]\n",
      "   [ 70  76  76]\n",
      "   [ 66  68  70]]\n",
      "\n",
      "  [[ 65  69  69]\n",
      "   [ 73  76  76]\n",
      "   [ 82  82  81]\n",
      "   ..., \n",
      "   [ 86  82  87]\n",
      "   [ 73  78  82]\n",
      "   [ 67  69  73]]\n",
      "\n",
      "  [[ 63  68  68]\n",
      "   [ 71  72  72]\n",
      "   [ 80  78  77]\n",
      "   ..., \n",
      "   [ 98  84  89]\n",
      "   [ 71  75  76]\n",
      "   [ 68  71  69]]\n",
      "\n",
      "  ..., \n",
      "  [[154 133 136]\n",
      "   [149 133 138]\n",
      "   [144 133 137]\n",
      "   ..., \n",
      "   [ 77  78  79]\n",
      "   [ 80  84  79]\n",
      "   [ 92  95  85]]\n",
      "\n",
      "  [[ 99 100 101]\n",
      "   [101 100 102]\n",
      "   [100  97 102]\n",
      "   ..., \n",
      "   [ 81  83  83]\n",
      "   [ 94  97  93]\n",
      "   [105 109 101]]\n",
      "\n",
      "  [[ 72  74  74]\n",
      "   [ 81  82  81]\n",
      "   [ 90  91  96]\n",
      "   ..., \n",
      "   [ 78  78  79]\n",
      "   [103 103 100]\n",
      "   [101 104  96]]]\n",
      "\n",
      "\n",
      " [[[ 72  72  72]\n",
      "   [ 78  78  78]\n",
      "   [ 78  78  74]\n",
      "   ..., \n",
      "   [ 77  81  71]\n",
      "   [ 71  78  72]\n",
      "   [ 63  66  64]]\n",
      "\n",
      "  [[ 67  68  68]\n",
      "   [ 76  75  74]\n",
      "   [ 90  84  83]\n",
      "   ..., \n",
      "   [100  90  84]\n",
      "   [ 76  79  76]\n",
      "   [ 73  74  73]]\n",
      "\n",
      "  [[ 65  69  69]\n",
      "   [ 75  71  71]\n",
      "   [104  92  94]\n",
      "   ..., \n",
      "   [111  86  88]\n",
      "   [ 74  74  74]\n",
      "   [ 70  70  68]]\n",
      "\n",
      "  ..., \n",
      "  [[141 131 116]\n",
      "   [139 128 113]\n",
      "   [136 125 116]\n",
      "   ..., \n",
      "   [ 74  75  75]\n",
      "   [ 73  76  76]\n",
      "   [ 76  79  79]]\n",
      "\n",
      "  [[110 117 109]\n",
      "   [112 114 105]\n",
      "   [113 110 105]\n",
      "   ..., \n",
      "   [ 72  74  74]\n",
      "   [ 80  82  81]\n",
      "   [ 92  94  92]]\n",
      "\n",
      "  [[ 73  78  77]\n",
      "   [ 83  86  83]\n",
      "   [ 93  94  93]\n",
      "   ..., \n",
      "   [ 71  73  72]\n",
      "   [ 82  83  80]\n",
      "   [ 95  97  91]]]\n",
      "\n",
      "\n",
      " ..., \n",
      " [[[ 10  10  12]\n",
      "   [ 12  12  13]\n",
      "   [ 13  11  13]\n",
      "   ..., \n",
      "   [ 12  11  13]\n",
      "   [ 12  11  13]\n",
      "   [ 11  10  13]]\n",
      "\n",
      "  [[ 12  11  13]\n",
      "   [ 13  12  14]\n",
      "   [ 12  11  13]\n",
      "   ..., \n",
      "   [ 12  11  13]\n",
      "   [ 12  11  13]\n",
      "   [ 12  10  12]]\n",
      "\n",
      "  [[ 10  10  13]\n",
      "   [ 11  12  15]\n",
      "   [ 14  14  16]\n",
      "   ..., \n",
      "   [ 12  11  13]\n",
      "   [ 12  12  14]\n",
      "   [ 11  11  11]]\n",
      "\n",
      "  ..., \n",
      "  [[ 10   9  11]\n",
      "   [ 11   9  11]\n",
      "   [  9   9  11]\n",
      "   ..., \n",
      "   [  9   9  12]\n",
      "   [ 10  10  12]\n",
      "   [ 11  10  11]]\n",
      "\n",
      "  [[  9   9  11]\n",
      "   [ 10   9  11]\n",
      "   [ 10   9  11]\n",
      "   ..., \n",
      "   [ 10   9  11]\n",
      "   [ 11  11  14]\n",
      "   [ 11  11  12]]\n",
      "\n",
      "  [[  9   9  12]\n",
      "   [ 11   9  12]\n",
      "   [ 10   9  11]\n",
      "   ..., \n",
      "   [ 10  10  12]\n",
      "   [ 11  11  13]\n",
      "   [ 11  11  13]]]\n",
      "\n",
      "\n",
      " [[[ 13  12  15]\n",
      "   [ 13  13  16]\n",
      "   [ 13  12  13]\n",
      "   ..., \n",
      "   [ 12  11  12]\n",
      "   [ 11  10  11]\n",
      "   [ 11  14  20]]\n",
      "\n",
      "  [[ 14  12  14]\n",
      "   [ 13  12  14]\n",
      "   [ 14  12  13]\n",
      "   ..., \n",
      "   [ 12  11  14]\n",
      "   [ 11  10  11]\n",
      "   [ 10  10  14]]\n",
      "\n",
      "  [[ 12  11  11]\n",
      "   [ 12  11  13]\n",
      "   [ 13  12  13]\n",
      "   ..., \n",
      "   [ 10  10  12]\n",
      "   [ 11  10  12]\n",
      "   [  9   9  12]]\n",
      "\n",
      "  ..., \n",
      "  [[ 12  11  13]\n",
      "   [ 12  10  12]\n",
      "   [  9   8  10]\n",
      "   ..., \n",
      "   [ 13  11  13]\n",
      "   [ 10   9  10]\n",
      "   [  9   9  10]]\n",
      "\n",
      "  [[ 10  10  11]\n",
      "   [ 11  10  12]\n",
      "   [ 11  10  12]\n",
      "   ..., \n",
      "   [ 13  12  14]\n",
      "   [ 10   9  10]\n",
      "   [ 10   9   9]]\n",
      "\n",
      "  [[ 10   9  12]\n",
      "   [ 10   9  11]\n",
      "   [ 10  10  12]\n",
      "   ..., \n",
      "   [ 13  12  14]\n",
      "   [ 11   9  11]\n",
      "   [ 11  10  11]]]\n",
      "\n",
      "\n",
      " [[[ 11  10  12]\n",
      "   [ 11  10  12]\n",
      "   [ 10   9  10]\n",
      "   ..., \n",
      "   [ 17  18  19]\n",
      "   [ 22  21  20]\n",
      "   [ 20  14  15]]\n",
      "\n",
      "  [[ 12  11  11]\n",
      "   [ 12  11  12]\n",
      "   [ 11  10  12]\n",
      "   ..., \n",
      "   [ 41  55  73]\n",
      "   [ 83  80  79]\n",
      "   [ 44  23  20]]\n",
      "\n",
      "  [[ 12  12  13]\n",
      "   [ 12  12  14]\n",
      "   [ 12  11  12]\n",
      "   ..., \n",
      "   [ 82 102 123]\n",
      "   [ 91  83 104]\n",
      "   [ 51  36  42]]\n",
      "\n",
      "  ..., \n",
      "  [[ 11  11  15]\n",
      "   [ 12  11  12]\n",
      "   [ 10   9  10]\n",
      "   ..., \n",
      "   [ 10   9  11]\n",
      "   [ 10   9  11]\n",
      "   [  9   9  10]]\n",
      "\n",
      "  [[ 11  11  13]\n",
      "   [ 10   9  12]\n",
      "   [  9   9  10]\n",
      "   ..., \n",
      "   [ 10   9  11]\n",
      "   [ 10   9  11]\n",
      "   [ 10   9  10]]\n",
      "\n",
      "  [[ 11  11  12]\n",
      "   [ 10  10  10]\n",
      "   [ 10   9  10]\n",
      "   ..., \n",
      "   [  9   9  12]\n",
      "   [ 10  10  12]\n",
      "   [ 10   9  11]]]]\n",
      "\n",
      "Image Shape: (32, 32, 3)\n",
      "\n",
      "Training Set:   31367 samples\n",
      "X Validation Set:   7842 samples\n",
      "y Validation Set:   7842 samples\n",
      "Test Set:       12630 samples\n",
      "Number of labels:       12630\n",
      "32\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10c08d630>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "\n",
    "# Load pickled data\n",
    "import pickle\n",
    "\n",
    "# TODO: Fill this in based on where you saved the training and testing data\n",
    "\n",
    "training_file = 'train.p'\n",
    "testing_file = 'test.p'\n",
    "\n",
    "with open(training_file, mode='rb') as f:\n",
    "    train = pickle.load(f)\n",
    "with open(testing_file, mode='rb') as f:\n",
    "    test = pickle.load(f)\n",
    "\n",
    "   \n",
    "X_train, y_train = train['features'], train['labels']\n",
    "\n",
    "X_test, y_test = test['features'], test['labels']\n",
    "\n",
    "assert(len(X_train) == len(y_train))\n",
    "assert(len(X_test) == len(y_test))\n",
    "print (X_train)\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_validate, y_train, y_validate = train_test_split(X_train, y_train, test_size=0.2, random_state=42)\n",
    "print()\n",
    "print(\"Image Shape: {}\".format(X_train[0].shape))\n",
    "print()\n",
    "print(\"Training Set:   {} samples\".format(len(X_train)))\n",
    "print(\"X Validation Set:   {} samples\".format(len(X_validate)))\n",
    "print(\"y Validation Set:   {} samples\".format(len(y_validate)))\n",
    "print(\"Test Set:       {} samples\".format(len(X_test)))\n",
    "print(\"Number of labels:       {}\".format(len(y_test)))\n",
    "#print (train['features'][0][0])#single row\n",
    "#print (train['features'][0])#single row\n",
    "#print (len (train['features'][0]))#single row\n",
    "\n",
    "# now exchage parts of the training set with own images\n",
    "import matplotlib.image as mpimg\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "img=mpimg.imread('way.jpg')\n",
    "plt.figure(figsize=(1,1))\n",
    "plt.imshow(img)\n",
    "data = [np.asarray(img, dtype=np.uint8)]\n",
    "#print (data[0])#single row\n",
    "print (len (data[0]))#single row\n",
    "#X_train[0] = data[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "## Step 1: Dataset Summary & Exploration\n",
    "\n",
    "The pickled data is a dictionary with 4 key/value pairs:\n",
    "\n",
    "- `'features'` is a 4D array containing raw pixel data of the traffic sign images, (num examples, width, height, channels).\n",
    "- `'labels'` is a 1D array containing the label/class id of the traffic sign. The file `signnames.csv` contains id -> name mappings for each id.\n",
    "- `'sizes'` is a list containing tuples, (width, height) representing the the original width and height the image.\n",
    "- `'coords'` is a list containing tuples, (x1, y1, x2, y2) representing coordinates of a bounding box around the sign in the image. **THESE COORDINATES ASSUME THE ORIGINAL IMAGE. THE PICKLED DATA CONTAINS RESIZED VERSIONS (32 by 32) OF THESE IMAGES**\n",
    "\n",
    "Complete the basic data summary below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of training examples = 39209\n",
      "Number of testing examples = 12630\n",
      "Image data shape = (32, 32, 3)\n",
      "Number of classes = 43\n"
     ]
    }
   ],
   "source": [
    "### Replace each question mark with the appropriate value.\n",
    "\n",
    "# TODO: Number of training examples\n",
    "n_train = 39209\n",
    "\n",
    "# TODO: Number of testing examples.\n",
    "n_test = 12630\n",
    "\n",
    "# TODO: What's the shape of an traffic sign image?\n",
    "image_shape = (32, 32, 3)\n",
    "\n",
    "# TODO: How many unique classes/labels there are in the dataset.\n",
    "n_classes = 43\n",
    "\n",
    "\n",
    "print(\"Number of training examples =\", n_train)\n",
    "print(\"Number of testing examples =\", n_test)\n",
    "print(\"Image data shape =\", image_shape)\n",
    "print(\"Number of classes =\", n_classes)\n",
    "#print (X_train[10])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Visualize the German Traffic Signs Dataset using the pickled file(s). This is open ended, suggestions include: plotting traffic sign images, plotting the count of each sign, etc.\n",
    "\n",
    "The [Matplotlib](http://matplotlib.org/) [examples](http://matplotlib.org/examples/index.html) and [gallery](http://matplotlib.org/gallery.html) pages are a great resource for doing visualizations in Python.\n",
    "\n",
    "**NOTE:** It's recommended you start with something simple first. If you wish to do more, come back to it after you've completed the rest of the sections."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "36\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x128f6e7f0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "### Data exploration visualization goes here.\n",
    "### Feel free to use as many code cells as needed.\n",
    "import random\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "# Visualizations will be shown in the notebook.\n",
    "%matplotlib inline\n",
    "\n",
    "\n",
    "index = 0 #random.randint(0, n_train)\n",
    "image = X_train[index].squeeze()\n",
    "#X_train[index] = img\n",
    "plt.figure(figsize=(1,1))\n",
    "plt.imshow(image)\n",
    "print(y_train[index])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "32\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1225b2748>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.image as mpimg\n",
    "img=mpimg.imread('way.jpg')\n",
    "plt.figure(figsize=(1,1))\n",
    "plt.imshow(img)\n",
    "data = [np.asarray(img, dtype=np.uint8)]\n",
    "#print (data[0])#single row\n",
    "print (len (data[0]))#single row"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "----\n",
    "\n",
    "## Step 2: Design and Test a Model Architecture\n",
    "\n",
    "Design and implement a deep learning model that learns to recognize traffic signs. Train and test your model on the [German Traffic Sign Dataset](http://benchmark.ini.rub.de/?section=gtsrb&subsection=dataset).\n",
    "\n",
    "There are various aspects to consider when thinking about this problem:\n",
    "\n",
    "- Neural network architecture\n",
    "- Play around preprocessing techniques (normalization, rgb to grayscale, etc)\n",
    "- Number of examples per label (some have more than others).\n",
    "- Generate fake data.\n",
    "\n",
    "Here is an example of a [published baseline model on this problem](http://yann.lecun.com/exdb/publis/pdf/sermanet-ijcnn-11.pdf). It's not required to be familiar with the approach used in the paper but, it's good practice to try to read papers like these.\n",
    "\n",
    "**NOTE:** The LeNet-5 implementation shown in the [classroom](https://classroom.udacity.com/nanodegrees/nd013/parts/fbf77062-5703-404e-b60c-95b78b2f3f9e/modules/6df7ae49-c61c-4bb2-a23e-6527e69209ec/lessons/601ae704-1035-4287-8b11-e2c2716217ad/concepts/d4aca031-508f-4e0b-b493-e7b706120f81) at the end of the CNN lesson is a solid starting point. You'll have to change the number of classes and possibly the preprocessing, but aside from that it's plug and play!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Implementation\n",
    "\n",
    "Use the code cell (or multiple code cells, if necessary) to implement the first step of your project. Once you have completed your implementation and are satisfied with the results, be sure to thoroughly answer the questions that follow."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "### Preprocess the data here.\n",
    "### Feel free to use as many code cells as needed.\n",
    "\n",
    "#SHUFFLE THE DATA\n",
    "from sklearn.utils import shuffle\n",
    "\n",
    "### Don't shuffle data for new images\n",
    "X_train, y_train = shuffle(X_train, y_train)\n",
    "X_validate, y_validate = shuffle(X_validate, y_validate)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 1 \n",
    "\n",
    "_Describe how you preprocessed the data. Why did you choose that technique?_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "### Generate additional data (OPTIONAL!)\n",
    "### and split the data into training/validation/testing sets here.\n",
    "\n",
    "# 1) split part of the training set using: \n",
    "# X_train, X_validate, y_train, y_validate = train_test_split(X_train, y_train, test_size=0.2, random_state=42)\n",
    "# 2) shuffled the training set and the validation set\n",
    "# 3) no need fot padding as images are already 32 x 32\n",
    "\n",
    "### Feel free to use as many code cells as needed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 2\n",
    "\n",
    "_Describe how you set up the training, validation and testing data for your model. **Optional**: If you generated additional data, how did you generate the data? Why did you generate the data? What are the differences in the new dataset (with generated data) from the original dataset?_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "### Define your architecture here.\n",
    "import tensorflow as tf\n",
    "\n",
    "EPOCHS = 1\n",
    "BATCH_SIZE = 1\n",
    "\n",
    "from tensorflow.contrib.layers import flatten\n",
    "\n",
    "def LeNet(x): \n",
    "    # Arguments used for tf.truncated_normal, randomly defines variables for the weights and biases for each layer\n",
    "    mu = 0\n",
    "    sigma = 0.1\n",
    "    # SOLUTION: Layer 1: Convolutional. Input = 32x32x1. Output = 28x28x6.\n",
    "    conv1_W = tf.Variable(tf.truncated_normal(shape=(5, 5, 3, 6), mean = mu, stddev = sigma))\n",
    "    conv1_b = tf.Variable(tf.zeros(6))\n",
    "    conv1   = tf.nn.conv2d(x, conv1_W, strides=[1, 1, 1, 1], padding='VALID') + conv1_b\n",
    "\n",
    "    # SOLUTION: Activation.\n",
    "    conv1 = tf.nn.relu(conv1)\n",
    "\n",
    "    # SOLUTION: Pooling. Input = 28x28x6. Output = 14x14x6.\n",
    "    conv1 = tf.nn.max_pool(conv1, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='VALID')\n",
    "\n",
    "    # SOLUTION: Layer 2: Convolutional. Output = 10x10x16.\n",
    "    conv2_W = tf.Variable(tf.truncated_normal(shape=(5, 5, 6, 16), mean = mu, stddev = sigma))\n",
    "    conv2_b = tf.Variable(tf.zeros(16))\n",
    "    conv2   = tf.nn.conv2d(conv1, conv2_W, strides=[1, 1, 1, 1], padding='VALID') + conv2_b\n",
    "    \n",
    "    # SOLUTION: Activation.\n",
    "    conv2 = tf.nn.relu(conv2)\n",
    "\n",
    "    # SOLUTION: Pooling. Input = 10x10x16. Output = 5x5x16.\n",
    "    conv2 = tf.nn.max_pool(conv2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='VALID')\n",
    "\n",
    "    # SOLUTION: Flatten. Input = 5x5x16. Output = 400.\n",
    "    fc0   = flatten(conv2)\n",
    "    \n",
    "    # SOLUTION: Layer 3: Fully Connected. Input = 400. Output = 120.\n",
    "    fc1_W = tf.Variable(tf.truncated_normal(shape=(400, 120), mean = mu, stddev = sigma))\n",
    "    fc1_b = tf.Variable(tf.zeros(120))\n",
    "    fc1   = tf.matmul(fc0, fc1_W) + fc1_b\n",
    "    \n",
    "    # SOLUTION: Activation.\n",
    "    fc1    = tf.nn.relu(fc1)\n",
    "\n",
    "    # SOLUTION: Layer 4: Fully Connected. Input = 120. Output = 84.\n",
    "    fc2_W  = tf.Variable(tf.truncated_normal(shape=(120, 84), mean = mu, stddev = sigma))\n",
    "    fc2_b  = tf.Variable(tf.zeros(84))\n",
    "    fc2    = tf.matmul(fc1, fc2_W) + fc2_b\n",
    "    \n",
    "    # SOLUTION: Activation.\n",
    "    fc2    = tf.nn.relu(fc2)\n",
    "\n",
    "    # SOLUTION: Layer 5: Fully Connected. Input = 84. Output = 10.\n",
    "    fc3_W  = tf.Variable(tf.truncated_normal(shape=(84, 43), mean = mu, stddev = sigma))\n",
    "    fc3_b  = tf.Variable(tf.zeros(43))\n",
    "    logits = tf.matmul(fc2, fc3_W) + fc3_b\n",
    "    print (\"y in leNet\", y)\n",
    "    return logits\n",
    "\n",
    "x = tf.placeholder(tf.float32, (None, 32, 32, 3))\n",
    "y = tf.placeholder(tf.int32, (None))\n",
    "one_hot_y = tf.one_hot(y, n_classes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 3\n",
    "\n",
    "_What does your final architecture look like? (Type of model, layers, sizes, connectivity, etc.)  For reference on how to build a deep neural network using TensorFlow, see [Deep Neural Network in TensorFlow\n",
    "](https://classroom.udacity.com/nanodegrees/nd013/parts/fbf77062-5703-404e-b60c-95b78b2f3f9e/modules/6df7ae49-c61c-4bb2-a23e-6527e69209ec/lessons/b516a270-8600-4f93-a0a3-20dfeabe5da6/concepts/83a3a2a2-a9bd-4b7b-95b0-eb924ab14432) from the classroom._\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y in leNet Tensor(\"Placeholder_11:0\", dtype=int32)\n",
      "Training...\n",
      "\n",
      "EPOCH 1 ...\n",
      "Validation Accuracy = 0.047\n",
      "\n",
      "Model saved\n"
     ]
    }
   ],
   "source": [
    "### Train your model here.\n",
    "### Feel free to use as many code cells as needed.\n",
    "\n",
    "#plt.figure(figsize=(1,1))\n",
    "rate = 0.001\n",
    "\n",
    "logits = LeNet(x)\n",
    "\n",
    "cross_entropy = tf.nn.softmax_cross_entropy_with_logits(logits, one_hot_y)\n",
    "loss_operation = tf.reduce_mean(cross_entropy)\n",
    "optimizer = tf.train.AdamOptimizer(learning_rate = rate)\n",
    "training_operation = optimizer.minimize(loss_operation)\n",
    "\n",
    "correct_prediction = tf.equal(tf.argmax(logits, 1), tf.argmax(one_hot_y, 1))\n",
    "accuracy_operation = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n",
    "saver = tf.train.Saver()\n",
    "\n",
    "def evaluate(X_data, y_data):\n",
    "    num_examples = len(X_data)\n",
    "    total_accuracy = 0\n",
    "    sess = tf.get_default_session()\n",
    "    for offset in range(0, num_examples, BATCH_SIZE):\n",
    "        batch_x, batch_y = X_data[offset:offset+BATCH_SIZE], y_data[offset:offset+BATCH_SIZE]\n",
    "        \n",
    "        #image = batch_x[0].squeeze()\n",
    "        #plt.imshow(image)\n",
    "        \n",
    "        accuracy = sess.run(accuracy_operation, feed_dict={x: batch_x, y: batch_y})\n",
    "        total_accuracy += (accuracy * len(batch_x))\n",
    "    return total_accuracy / num_examples\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    sess.run(tf.global_variables_initializer())\n",
    "    num_examples = len(X_train)\n",
    "    \n",
    "    print(\"Training...\")\n",
    "    print()\n",
    "    for i in range(EPOCHS):\n",
    "        X_train, y_train = shuffle(X_train, y_train) # DONT SHUFFLE FOR NEW IMAGES\n",
    "        for offset in range(0, num_examples, BATCH_SIZE):\n",
    "            end = offset + BATCH_SIZE\n",
    "            batch_x, batch_y = X_train[offset:end], y_train[offset:end]\n",
    "            sess.run(training_operation, feed_dict={x: batch_x, y: batch_y})\n",
    "            \n",
    "        validation_accuracy = evaluate(X_validate, y_validate)\n",
    "        print(\"EPOCH {} ...\".format(i+1))\n",
    "        print(\"Validation Accuracy = {:.3f}\".format(validation_accuracy))\n",
    "        print()\n",
    "    saver.save(sess, 'lenet')\n",
    "    print(\"Model saved\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 4\n",
    "\n",
    "_How did you train your model? (Type of optimizer, batch size, epochs, hyperparameters, etc.)_\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer:**\n",
    "With the leNet start setup\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 5\n",
    "\n",
    "\n",
    "_What approach did you take in coming up with a solution to this problem? It may have been a process of trial and error, in which case, outline the steps you took to get to the final solution and why you chose those steps. Perhaps your solution involved an already well known implementation or architecture. In this case, discuss why you think this is suitable for the current problem._"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer:**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "## Step 3: Test a Model on New Images\n",
    "\n",
    "Take several pictures of traffic signs that you find on the web or around you (at least five), and run them through your classifier on your computer to produce example results. The classifier might not recognize some local signs but it could prove interesting nonetheless.\n",
    "\n",
    "You may find `signnames.csv` useful as it contains mappings from the class id (integer) to the actual sign name."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Implementation\n",
    "\n",
    "Use the code cell (or multiple code cells, if necessary) to implement the first step of your project. Once you have completed your implementation and are satisfied with the results, be sure to thoroughly answer the questions that follow."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "### Load the images and plot them here.\n",
    "### Feel free to use as many code cells as needed.\n",
    "\n",
    "import matplotlib.image as mpimg\n",
    "img=mpimg.imread('way.jpg')\n",
    "#plt.figure(figsize=(1,1))\n",
    "#plt.imshow(img)\n",
    "#data = np.asarray(img, dtype=np.uint8)\n",
    "#print (data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 6\n",
    "\n",
    "_Choose five candidate images of traffic signs and provide them in the report. Are there any particular qualities of the image(s) that might make classification difficult? It could be helpful to plot the images in the notebook._\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "ename": "InvalidArgumentError",
     "evalue": "You must feed a value for placeholder tensor 'Placeholder_10' with dtype float\n\t [[Node: Placeholder_10 = Placeholder[dtype=DT_FLOAT, shape=[], _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()]]\n\nCaused by op 'Placeholder_10', defined at:\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/runpy.py\", line 184, in _run_module_as_main\n    \"__main__\", mod_spec)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/runpy.py\", line 85, in _run_code\n    exec(code, run_globals)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/ipykernel/__main__.py\", line 3, in <module>\n    app.launch_new_instance()\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/traitlets/config/application.py\", line 653, in launch_instance\n    app.start()\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/ipykernel/kernelapp.py\", line 474, in start\n    ioloop.IOLoop.instance().start()\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/zmq/eventloop/ioloop.py\", line 162, in start\n    super(ZMQIOLoop, self).start()\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/tornado/ioloop.py\", line 887, in start\n    handler_func(fd_obj, events)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/tornado/stack_context.py\", line 275, in null_wrapper\n    return fn(*args, **kwargs)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/zmq/eventloop/zmqstream.py\", line 440, in _handle_events\n    self._handle_recv()\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/zmq/eventloop/zmqstream.py\", line 472, in _handle_recv\n    self._run_callback(callback, msg)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/zmq/eventloop/zmqstream.py\", line 414, in _run_callback\n    callback(*args, **kwargs)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/tornado/stack_context.py\", line 275, in null_wrapper\n    return fn(*args, **kwargs)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/ipykernel/kernelbase.py\", line 276, in dispatcher\n    return self.dispatch_shell(stream, msg)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/ipykernel/kernelbase.py\", line 228, in dispatch_shell\n    handler(stream, idents, msg)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/ipykernel/kernelbase.py\", line 390, in execute_request\n    user_expressions, allow_stdin)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/ipykernel/ipkernel.py\", line 196, in do_execute\n    res = shell.run_cell(code, store_history=store_history, silent=silent)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/ipykernel/zmqshell.py\", line 501, in run_cell\n    return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/IPython/core/interactiveshell.py\", line 2717, in run_cell\n    interactivity=interactivity, compiler=compiler, result=result)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/IPython/core/interactiveshell.py\", line 2821, in run_ast_nodes\n    if self.run_code(code, result):\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/IPython/core/interactiveshell.py\", line 2881, in run_code\n    exec(code_obj, self.user_global_ns, self.user_ns)\n  File \"<ipython-input-27-5f8a2a4d39c2>\", line 61, in <module>\n    x = tf.placeholder(tf.float32, (None, 32, 32, 3))\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/tensorflow/python/ops/array_ops.py\", line 1587, in placeholder\n    name=name)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 2043, in _placeholder\n    name=name)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/tensorflow/python/framework/op_def_library.py\", line 759, in apply_op\n    op_def=op_def)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 2240, in create_op\n    original_op=self._default_original_op, op_def=op_def)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 1128, in __init__\n    self._traceback = _extract_stack()\n\nInvalidArgumentError (see above for traceback): You must feed a value for placeholder tensor 'Placeholder_10' with dtype float\n\t [[Node: Placeholder_10 = Placeholder[dtype=DT_FLOAT, shape=[], _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()]]\n",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mInvalidArgumentError\u001b[0m                      Traceback (most recent call last)",
      "\u001b[0;32m/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_do_call\u001b[0;34m(self, fn, *args)\u001b[0m\n\u001b[1;32m   1020\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1021\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1022\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mOpError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_run_fn\u001b[0;34m(session, feed_dict, fetch_list, target_list, options, run_metadata)\u001b[0m\n\u001b[1;32m   1002\u001b[0m                                  \u001b[0mfeed_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfetch_list\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget_list\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1003\u001b[0;31m                                  status, run_metadata)\n\u001b[0m\u001b[1;32m   1004\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/contextlib.py\u001b[0m in \u001b[0;36m__exit__\u001b[0;34m(self, type, value, traceback)\u001b[0m\n\u001b[1;32m     65\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 66\u001b[0;31m                 \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgen\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     67\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mStopIteration\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/tensorflow/python/framework/errors_impl.py\u001b[0m in \u001b[0;36mraise_exception_on_not_ok_status\u001b[0;34m()\u001b[0m\n\u001b[1;32m    468\u001b[0m           \u001b[0mcompat\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mas_text\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpywrap_tensorflow\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTF_Message\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstatus\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 469\u001b[0;31m           pywrap_tensorflow.TF_GetCode(status))\n\u001b[0m\u001b[1;32m    470\u001b[0m   \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mInvalidArgumentError\u001b[0m: You must feed a value for placeholder tensor 'Placeholder_10' with dtype float\n\t [[Node: Placeholder_10 = Placeholder[dtype=DT_FLOAT, shape=[], _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()]]",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mInvalidArgumentError\u001b[0m                      Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-56-1c8c03d59b54>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     35\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSession\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0msess\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m     \u001b[0;31m#evaluation_of_logits = sess.run(logits, feed_dict={x: X_train[0]})\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 37\u001b[0;31m     \u001b[0mevaluation_of_logits\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msess\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlogits\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mimage\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     38\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36mrun\u001b[0;34m(self, fetches, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m    764\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    765\u001b[0m       result = self._run(None, fetches, feed_dict, options_ptr,\n\u001b[0;32m--> 766\u001b[0;31m                          run_metadata_ptr)\n\u001b[0m\u001b[1;32m    767\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mrun_metadata\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    768\u001b[0m         \u001b[0mproto_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_session\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTF_GetBuffer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrun_metadata_ptr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_run\u001b[0;34m(self, handle, fetches, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m    962\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfinal_fetches\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mfinal_targets\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    963\u001b[0m       results = self._do_run(handle, final_targets, final_fetches,\n\u001b[0;32m--> 964\u001b[0;31m                              feed_dict_string, options, run_metadata)\n\u001b[0m\u001b[1;32m    965\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    966\u001b[0m       \u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_do_run\u001b[0;34m(self, handle, target_list, fetch_list, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m   1012\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mhandle\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1013\u001b[0m       return self._do_call(_run_fn, self._session, feed_dict, fetch_list,\n\u001b[0;32m-> 1014\u001b[0;31m                            target_list, options, run_metadata)\n\u001b[0m\u001b[1;32m   1015\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1016\u001b[0m       return self._do_call(_prun_fn, self._session, handle, feed_dict,\n",
      "\u001b[0;32m/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_do_call\u001b[0;34m(self, fn, *args)\u001b[0m\n\u001b[1;32m   1032\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1033\u001b[0m           \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1034\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode_def\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmessage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1035\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1036\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_extend_graph\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mInvalidArgumentError\u001b[0m: You must feed a value for placeholder tensor 'Placeholder_10' with dtype float\n\t [[Node: Placeholder_10 = Placeholder[dtype=DT_FLOAT, shape=[], _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()]]\n\nCaused by op 'Placeholder_10', defined at:\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/runpy.py\", line 184, in _run_module_as_main\n    \"__main__\", mod_spec)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/runpy.py\", line 85, in _run_code\n    exec(code, run_globals)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/ipykernel/__main__.py\", line 3, in <module>\n    app.launch_new_instance()\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/traitlets/config/application.py\", line 653, in launch_instance\n    app.start()\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/ipykernel/kernelapp.py\", line 474, in start\n    ioloop.IOLoop.instance().start()\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/zmq/eventloop/ioloop.py\", line 162, in start\n    super(ZMQIOLoop, self).start()\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/tornado/ioloop.py\", line 887, in start\n    handler_func(fd_obj, events)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/tornado/stack_context.py\", line 275, in null_wrapper\n    return fn(*args, **kwargs)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/zmq/eventloop/zmqstream.py\", line 440, in _handle_events\n    self._handle_recv()\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/zmq/eventloop/zmqstream.py\", line 472, in _handle_recv\n    self._run_callback(callback, msg)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/zmq/eventloop/zmqstream.py\", line 414, in _run_callback\n    callback(*args, **kwargs)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/tornado/stack_context.py\", line 275, in null_wrapper\n    return fn(*args, **kwargs)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/ipykernel/kernelbase.py\", line 276, in dispatcher\n    return self.dispatch_shell(stream, msg)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/ipykernel/kernelbase.py\", line 228, in dispatch_shell\n    handler(stream, idents, msg)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/ipykernel/kernelbase.py\", line 390, in execute_request\n    user_expressions, allow_stdin)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/ipykernel/ipkernel.py\", line 196, in do_execute\n    res = shell.run_cell(code, store_history=store_history, silent=silent)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/ipykernel/zmqshell.py\", line 501, in run_cell\n    return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/IPython/core/interactiveshell.py\", line 2717, in run_cell\n    interactivity=interactivity, compiler=compiler, result=result)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/IPython/core/interactiveshell.py\", line 2821, in run_ast_nodes\n    if self.run_code(code, result):\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/IPython/core/interactiveshell.py\", line 2881, in run_code\n    exec(code_obj, self.user_global_ns, self.user_ns)\n  File \"<ipython-input-27-5f8a2a4d39c2>\", line 61, in <module>\n    x = tf.placeholder(tf.float32, (None, 32, 32, 3))\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/tensorflow/python/ops/array_ops.py\", line 1587, in placeholder\n    name=name)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/tensorflow/python/ops/gen_array_ops.py\", line 2043, in _placeholder\n    name=name)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/tensorflow/python/framework/op_def_library.py\", line 759, in apply_op\n    op_def=op_def)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 2240, in create_op\n    original_op=self._default_original_op, op_def=op_def)\n  File \"/Users/markusk/anaconda/envs/IntroToTensorFlow/lib/python3.5/site-packages/tensorflow/python/framework/ops.py\", line 1128, in __init__\n    self._traceback = _extract_stack()\n\nInvalidArgumentError (see above for traceback): You must feed a value for placeholder tensor 'Placeholder_10' with dtype float\n\t [[Node: Placeholder_10 = Placeholder[dtype=DT_FLOAT, shape=[], _device=\"/job:localhost/replica:0/task:0/cpu:0\"]()]]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x146f40668>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "### Run the predictions here.\n",
    "### Feel free to use as many code cells as needed.\n",
    "'''logits = LeNet(x)\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    sess.run(tf.global_variables_initializer())\n",
    "    num_examples = len(X_train)\n",
    "    \n",
    "    print(\"Training...\")\n",
    "    print()\n",
    "    for i in range(EPOCHS):\n",
    "        X_train, y_train = shuffle(X_train, y_train)\n",
    "        for offset in range(0, num_examples, BATCH_SIZE):\n",
    "            end = offset + BATCH_SIZE\n",
    "            batch_x, batch_y = X_train[offset:end], y_train[offset:end]\n",
    "            sess.run(logits, feed_dict={x: batch_x, y: batch_y})\n",
    "    print (y[0][0])\n",
    "    print (one_hot_y)\n",
    "   '''\n",
    "import matplotlib.image as mpimg\n",
    "from numpy import array\n",
    "\n",
    "img=mpimg.imread('way.jpg')\n",
    "plt.figure(figsize=(1,1))\n",
    "plt.imshow(img)\n",
    "#print (img)\n",
    "#data = [np.asarray(img, dtype=np.uint8)]\n",
    "#print (data[0])#single row\n",
    "#print (len (data[0]))#single row\n",
    "#img4D = data \n",
    "#print (img4D)\n",
    "x = tf.placeholder(tf.float32, (None, 32, 32, 3))\n",
    "image = array(img).reshape(1, 32,32,3)\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    #evaluation_of_logits = sess.run(logits, feed_dict={x: X_train[0]})\n",
    "    evaluation_of_logits = sess.run(logits, feed_dict={x: image})\n",
    "    \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 7\n",
    "\n",
    "_Is your model able to perform equally well on captured pictures when compared to testing on the dataset? The simplest way to do this check the accuracy of the predictions. For example, if the model predicted 1 out of 5 signs correctly, it's 20% accurate._\n",
    "\n",
    "_**NOTE:** You could check the accuracy manually by using `signnames.csv` (same directory). This file has a mapping from the class id (0-42) to the corresponding sign name. So, you could take the class id the model outputs, lookup the name in `signnames.csv` and see if it matches the sign from the image._\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "### Visualize the softmax probabilities here.\n",
    "### Feel free to use as many code cells as needed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 8\n",
    "\n",
    "*Use the model's softmax probabilities to visualize the **certainty** of its predictions, [`tf.nn.top_k`](https://www.tensorflow.org/versions/r0.12/api_docs/python/nn.html#top_k) could prove helpful here. Which predictions is the model certain of? Uncertain? If the model was incorrect in its initial prediction, does the correct prediction appear in the top k? (k should be 5 at most)*\n",
    "\n",
    "`tf.nn.top_k` will return the values and indices (class ids) of the top k predictions. So if k=3, for each sign, it'll return the 3 largest probabilities (out of a possible 43) and the correspoding class ids.\n",
    "\n",
    "Take this numpy array as an example:\n",
    "\n",
    "```\n",
    "# (5, 6) array\n",
    "a = np.array([[ 0.24879643,  0.07032244,  0.12641572,  0.34763842,  0.07893497,\n",
    "         0.12789202],\n",
    "       [ 0.28086119,  0.27569815,  0.08594638,  0.0178669 ,  0.18063401,\n",
    "         0.15899337],\n",
    "       [ 0.26076848,  0.23664738,  0.08020603,  0.07001922,  0.1134371 ,\n",
    "         0.23892179],\n",
    "       [ 0.11943333,  0.29198961,  0.02605103,  0.26234032,  0.1351348 ,\n",
    "         0.16505091],\n",
    "       [ 0.09561176,  0.34396535,  0.0643941 ,  0.16240774,  0.24206137,\n",
    "         0.09155967]])\n",
    "```\n",
    "\n",
    "Running it through `sess.run(tf.nn.top_k(tf.constant(a), k=3))` produces:\n",
    "\n",
    "```\n",
    "TopKV2(values=array([[ 0.34763842,  0.24879643,  0.12789202],\n",
    "       [ 0.28086119,  0.27569815,  0.18063401],\n",
    "       [ 0.26076848,  0.23892179,  0.23664738],\n",
    "       [ 0.29198961,  0.26234032,  0.16505091],\n",
    "       [ 0.34396535,  0.24206137,  0.16240774]]), indices=array([[3, 0, 5],\n",
    "       [0, 1, 4],\n",
    "       [0, 5, 1],\n",
    "       [1, 3, 5],\n",
    "       [1, 4, 3]], dtype=int32))\n",
    "```\n",
    "\n",
    "Looking just at the first row we get `[ 0.34763842,  0.24879643,  0.12789202]`, you can confirm these are the 3 largest probabilities in `a`. You'll also notice `[3, 0, 5]` are the corresponding indices."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer:**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> **Note**: Once you have completed all of the code implementations and successfully answered each question above, you may finalize your work by exporting the iPython Notebook as an HTML document. You can do this by using the menu above and navigating to  \\n\",\n",
    "    \"**File -> Download as -> HTML (.html)**. Include the finished document along with this notebook as your submission."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [conda env:IntroToTensorFlow]",
   "language": "python",
   "name": "conda-env-IntroToTensorFlow-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
